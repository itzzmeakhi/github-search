{"version":3,"sources":["user-search/user-search.component.jsx","user/user.component.jsx","App.js","serviceWorker.js","index.js"],"names":["UserSearch","props","className","htmlFor","type","id","name","placeholder","onKeyUp","changed","autoComplete","User","src","user","avatar_url","alt","login","bio","followers","following","App","onSearchUser","event","keyCode","setState","searchUser","target","value","isDataLoading","fetch","state","then","userResponse","json","userData","followersResponse","followersData","userFollowers","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uTAyBeA,G,wBAtBI,SAACC,GAChB,OACI,yBAAKC,UAAY,cACb,yBAAKA,UAAY,kBACb,2BAAOC,QAAU,WAAWD,UAAY,2BACpC,uBAAGA,UAAU,kBAEjB,yBAAKA,UAAY,aACb,2BACIE,KAAO,OACPF,UAAY,eACZG,GAAK,WACLC,KAAO,WACPC,YAAc,gCACdC,QAAWP,EAAMQ,QACjBC,aAAe,aCDxBC,G,MAbF,SAACV,GACV,OACI,yBAAKC,UAAY,QACb,yBAAKU,IAAOX,EAAMY,KAAKC,WAAYC,IAAM,aAAab,UAAY,cAClE,uCAAaD,EAAMY,KAAKP,KAAxB,KACA,2BAAG,0CAAgBL,EAAMY,KAAKG,MAA3B,MACH,2BAAG,qCAAWf,EAAMY,KAAKI,IAAtB,MACH,2BAAG,2CAAiBhB,EAAMY,KAAKK,UAA5B,MACH,2BAAG,2CAAiBjB,EAAMY,KAAKM,UAA5B,SCuEAC,E,kDAxEb,aAAe,IAAD,8BACZ,gBAUFC,aAAe,SAACC,GAEO,KAAlBA,EAAMC,UAEP,EAAKC,SAAS,CACZC,WAAaH,EAAMI,OAAOC,MAC1BC,eAAgB,IACf,WACDC,MAAM,gCAAD,OAAiC,EAAKC,MAAML,aAC9CM,MAAK,SAAAC,GAAY,OAAIA,EAAaC,UAClCF,MAAK,SAAAG,GAEJL,MAAM,gCAAD,OAAiC,EAAKC,MAAML,WAA5C,eACFM,MAAK,SAAAI,GAAiB,OAAIA,EAAkBF,UAC5CF,MAAK,SAAAK,GACJ,EAAKZ,SAAS,CACZU,SAAWA,EACXG,cAAgBD,EAChBR,eAAgB,IACf,WACDU,QAAQC,IAAI,EAAKT,mBAK7BR,EAAMI,OAAOC,MAAQ,OAjCvB,EAAKG,MAAQ,CACXL,WAAa,GACbS,SAAW,GACXG,cAAgB,GAChBT,eAAgB,GAPN,E,qDAyCZ,OACE,yBAAK1B,UAAY,uBACf,yBAAKA,UAAY,kBACf,yBAAKA,UAAY,wBACf,wBAAIA,UAAY,aAAhB,wBAGJ,6BACA,yBAAKA,UAAY,OACf,yBAAKA,UAAY,wBACf,kBAAC,EAAD,CAAYO,QAAW+B,KAAKnB,iBAGhC,yBAAKnB,UAAY,OACf,yBAAKA,UAAY,wBACdsC,KAAKV,MAAMI,SACV,kBAAC,EAAD,CAAMrB,KAAQ2B,KAAKV,MAAMI,WACvB,KAGFM,KAAKV,MAAMF,cACT,uBAAG1B,UAAY,0BACf,Y,GAjEEuC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.7994a953.chunk.js","sourcesContent":["import React from 'react';\r\nimport './user-search.styles.css';\r\n\r\nconst UserSearch = (props) => {\r\n    return(\r\n        <div className = \"search-box\">\r\n            <div className = \"form-group row\">\r\n                <label htmlFor = \"userName\" className = \"col-md-1 col-form-label\">\r\n                    <i className=\"fa fa-github\"></i>\r\n                </label>\r\n                <div className = \"col-md-11\">\r\n                    <input\r\n                        type = \"text\"\r\n                        className = \"form-control\"\r\n                        id = \"userName\"\r\n                        name = \"userName\"\r\n                        placeholder = \"Start typing the username..!!\" \r\n                        onKeyUp = {props.changed}\r\n                        autoComplete = \"off\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserSearch;","import React from 'react';\r\n\r\nimport './user.styles.css';\r\n\r\nconst User = (props) => {\r\n    return(\r\n        <div className = \"user\">\r\n            <img src = {props.user.avatar_url} alt = \"User Image\" className = \"img-fluid\"/>\r\n            <h4> Name : {props.user.name} </h4>\r\n            <p><b> Username : {props.user.login} </b></p>\r\n            <p><b> Bio : {props.user.bio} </b></p>\r\n            <p><b> Followers : {props.user.followers} </b></p>\r\n            <p><b> Following : {props.user.following} </b></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport './App.css';\n\nimport UserSearch from './user-search/user-search.component';\nimport User from './user/user.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    \n    this.state = {\n      searchUser : \"\",\n      userData : \"\",\n      userFollowers : [],\n      isDataLoading : false\n    }\n  }\n\n  onSearchUser = (event) => {\n    //console.log(event.keyCode);\n    if(event.keyCode === 13) {\n      //console.log(event.target.value);\n      this.setState({\n        searchUser : event.target.value,\n        isDataLoading : true\n      }, () => {\n        fetch(`https://api.github.com/users/${this.state.searchUser}`)\n          .then(userResponse => userResponse.json())\n          .then(userData => {\n            //console.log(`https://api.github.com/users/${this.state.searchUser}/followers`);\n            fetch(`https://api.github.com/users/${this.state.searchUser}/followers`)\n              .then(followersResponse => followersResponse.json())\n              .then(followersData => {\n                this.setState({\n                  userData : userData,\n                  userFollowers : followersData,\n                  isDataLoading : false\n                }, () => {\n                  console.log(this.state);\n                })\n              })\n          })\n      })\n      event.target.value = null;\n    }\n  }\n\n  render() {\n    return(\n      <div className = \"container-fluid App\">\n        <div className = \"row header-row\">\n          <div className = \"offset-md-3 col-md-6\">\n            <h4 className = \"display-4\">Github User Search</h4>\n          </div>\n        </div>\n        <hr></hr>\n        <div className = \"row\">\n          <div className = \"offset-md-4 col-md-4\">\n            <UserSearch changed = {this.onSearchUser}></UserSearch>\n          </div>\n        </div>\n        <div className = \"row\">\n          <div className = \"offset-md-2 col-md-8\">\n            {this.state.userData ?\n              <User user = {this.state.userData}></User>\n              : null\n            }\n            {\n              this.state.isDataLoading ?\n                <i className = \"fa fa-spinner fa-spin\"></i>\n              : null\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}